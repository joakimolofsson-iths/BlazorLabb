@using BlazorLabb.Models

<li>
    <p class="@(HighlightSortedText("Id"))" style="width:60px">@(HighlightSearchedText(UserModel.Id.ToString()))</p>
    <p class="@(HighlightSortedText("Name"))">@(HighlightSearchedText(UserModel.Name))</p>
    <p class="@(HighlightSortedText("Email"))" style="width:300px">@(HighlightSearchedText(UserModel.Email))</p>
    <p class="@(HighlightSortedText("Street"))">@(HighlightSearchedText(UserModel.Address.Street))</p>
    <p class="@(HighlightSortedText("City"))">@(HighlightSearchedText(UserModel.Address.City))</p>
    <p class="@(HighlightSortedText("ZipCode"))" style="width:150px">@(HighlightSearchedText(UserModel.Address.ZipCode))</p>
    <p class="@(HighlightSortedText("CompanyName"))">@(HighlightSearchedText(UserModel.Company.Name))</p>
    <p class="@(HighlightSortedText("CompanyCatchphrase"))" style="width:320px">@(HighlightSearchedText(UserModel.Company.Catchphrase))</p>
</li>

@code {
    [Parameter]
    public User UserModel { get; set; }

    [CascadingParameter]
    public (string SelectedSortOption, string SearchInput) FromParent { get; set; }

    private string HighlightSortedText(string option)
    {
        if (FromParent.SelectedSortOption == option)
        {
            return "highlightSortedText";
        }

        return "";
    }

    private MarkupString HighlightSearchedText(string text)
    {
        if (string.IsNullOrWhiteSpace(FromParent.SearchInput) || string.IsNullOrWhiteSpace(text))
        {
            return new MarkupString(text);
        }

        int index = text.IndexOf(FromParent.SearchInput, StringComparison.OrdinalIgnoreCase);
        if (index == -1)
        {
            return new MarkupString(text);
        }
        
        string textBefore = text.Substring(0, index);
        string matchedText = text.Substring(index, FromParent.SearchInput.Length);
        string textAfter = text.Substring(index + FromParent.SearchInput.Length);

        return new MarkupString($"{textBefore}<span class='highlightSearchedText'>{matchedText}</span>{textAfter}");
    }
}
