@page "/users"
@rendermode InteractiveServer
@using BlazorLabb.Models
@using BlazorLabb.Components.Pages.Components
@using BlazorLabb.Services
@implements BlazorLabb.Interfaces.IUsers
@inject GenerateUsers generateUsers

<PageTitle>Users</PageTitle>

<h1>User Data</h1>

@if (_loadingUsers)
{
    <h5>Loading users...</h5>
}
else
{
    <p>@_errorMsg</p>

    <div class="sortSearchContainer">
        <button @onclick="HandleShowAll">Show All</button>
        <span>sort by:</span>
        <button @onclick='() => HandleSortBy("Id")'>Id</button>
        <button @onclick='() => HandleSortBy("Name")'>Name</button>
        <button @onclick='() => HandleSortBy("Email")'>E-Mail</button>
        <input placeholder="Search..." @oninput="HandleSearch" />
    </div>

    <br/>

    <ul class="userDisplayContainer">
        @foreach (var user in GetUsers())
        {
            <DisplayUser UserModel="user"/>
        }
    </ul>
}

@code {
    private bool _loadingUsers = true;
    private bool _showAllUsers = false;
    private string _selectedSortOption = "Name";
    private bool _sortAscending = true;
    private string _searchInput = string.Empty;
    private string? _errorMsg;

    private List<User> _locallyGeneratedUsers = new List<User>();
    private List<User> _jsonGeneratedUsers = new List<User>();
    private List<User> _allGeneratedUsers = new List<User>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            _loadingUsers = false;
            // await FetchJsonDataAsync();
            // GenerateLocalUsers();
            // CombineUsers();

            StateHasChanged();
        }
    }

    // private async Task FetchJsonDataAsync()
    // {
    //     using var httpClient = new HttpClient();

    //     try
    //     {
    //         var respone = await httpClient.GetStringAsync("https://jsonplaceholder.typicode.com/users");
    //         var users = JsonSerializer.Deserialize<List<User>>(respone, new JsonSerializerOptions
    //         {
    //             PropertyNameCaseInsensitive = true
    //         });

    //         _jsonGeneratedUsers = users;
    //     }
    //     catch (HttpRequestException e)
    //     {
    //         _errorMsg = "Http Request Error...";
    //     }
    //     catch (Exception e)
    //     {
    //         _errorMsg = "Something went wrong...";
    //     }
    // }

    // private void GenerateLocalUsers()
    // {
    //     string[] names = { "Emma Hayes", "Liam Carter", "Ava Brooks", "Noah Hughes", "Mia Bennett", "Ethan Price", "Sophia Rogers", "Oliver Reed", "Isabella Morgan", "Lucas Green" };
    //     string[] emails = { "bluefox87@mail.com", "sparklewave42@inbox.com", "sunnyclouds23@webmail.com", "silverstream55@netmail.com", "moonlitowl78@fastmail.com", "crimsonleaf91@mailbox.com", "goldenpetal34@postmail.com", "starfall16@freemail.com", "shimmeringsky45@quickmail.com", "wildriver82@openmail.com" };
    //     string[] streets = { "123 Maple St.", "456 Oak Ave.", "789 Pine Rd.", "101 Cedar Blvd.", "202 Birch Ln.", "303 Walnut St.", "404 Elm Dr.", "505 Chestnut Pl.", "606 Spruce Ct.", "707 Redwood Ter." };
    //     string[] cities = { "Springfield", "Rivertown", "Mapleton", "Brookside", "Lakeview", "Hillside", "Fairview", "Greendale", "Sunnydale", "Willowbrook" };
    //     string[] zipCodes = { "12345", "23456", "34567", "45678", "56789", "67890", "78901", "89012", "90123", "01234" };
    //     string[] companyNames = { "Greenfield Corp.", "Skyline Ventures", "Sunrise Innovations", "Peak Solutions", "Global Synergy", "BrightPath LLC", "NextGen Labs", "Blue Horizon Inc.", "Edge Dynamics", "VividTech" };
    //     string[] companyCatchphrases = { "Innovate Your Future", "Bringing Ideas to Life", "Where Vision Meets Reality", "Beyond the Horizon", "Empowering Possibilities", "Inspiring Growth", "Redefining Excellence", "The Future, Today", "Shaping Tomorrow", "Excellence Through Innovation" };

    //     var users = new List<User>();
    //     // var random = new Random();
    //     // int randomNumber = random.Next(0, 10);

    //     for (int i = 0; i < 10; i++)
    //     {

    //         users.Add(new User(i + 11, names[i], emails[i], streets[i], cities[i], zipCodes[i], companyNames[i], companyCatchphrases[i]));
    //     }

    //     _locallyGeneratedUsers = users;
    // }

    // private void CombineUsers()
    // {
    //     _allGeneratedUsers.AddRange(_locallyGeneratedUsers);
    //     _allGeneratedUsers.AddRange(_jsonGeneratedUsers);
    // }

    public List<User> GetUsers()
    {
        List<User> users;

        users = SortBySearch();
        users = SortBySelection(users);

        return users;
    }

    private List<User> SortBySearch()
    {
        List<User> users = new();

        if (string.IsNullOrWhiteSpace(_searchInput))
        {
            users = generateUsers.Users;
        }
        else
        {
            var _searchInputLower = _searchInput.ToLower();

            users = generateUsers.Users.Where(search => search.Id.ToString().StartsWith(_searchInputLower) ||
                search.Name.ToLower().StartsWith(_searchInputLower) ||
                search.Email.ToLower().StartsWith(_searchInputLower) ||
                search.Address.Street.ToLower().StartsWith(_searchInputLower) ||
                search.Address.City.ToLower().StartsWith(_searchInputLower) ||
                search.Address.ZipCode.StartsWith(_searchInputLower) ||
                search.Company.Name.ToLower().StartsWith(_searchInputLower) ||
                search.Company.Catchphrase.ToLower().StartsWith(_searchInputLower))
                .ToList();
        }

        return users;
    }

    private List<User> SortBySelection(List<User> users)
    {
        switch(_selectedSortOption)
        {
            case "Id":
                users = _sortAscending
                ? users.OrderBy(user => user.Id).ToList()
                : users.OrderByDescending(user => user.Id).ToList();
                break;
            case "Name":
                users = _sortAscending
                ? users.OrderBy(user => user.Name).ToList()
                : users.OrderByDescending(user => user.Name).ToList();
                break;
            case "Email":
                users = _sortAscending
                ? users.OrderBy(user => user.Email).ToList()
                : users.OrderByDescending(user => user.Email).ToList();
                break;
            default:
                users.OrderBy(user => user.Name).ToList();
                break;
        }

        int showLimitedUsers = 5;
        int? showAllUsers = _showAllUsers ? null : showLimitedUsers;

        return users.Take(showAllUsers ?? int.MaxValue).ToList();
    }

    private void HandleShowAll()
    {
        _showAllUsers = !_showAllUsers;
    }

    private void HandleSortBy(string option)
    {
        if (_selectedSortOption == option)
        {
            _sortAscending = !_sortAscending;
        }
        else
        {
            _selectedSortOption = option;
            _sortAscending = true;
        }        
    }

    private void HandleSearch(ChangeEventArgs e)
    {
        _searchInput = e.Value?.ToString() ?? string.Empty;
    }
}