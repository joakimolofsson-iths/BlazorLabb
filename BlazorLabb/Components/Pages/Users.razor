@page "/users"
@rendermode InteractiveServer
@using BlazorLabb.Models
@using BlazorLabb.Components.Pages.Components
@using BlazorLabb.Services
@inject GenerateUsers generateUsers

<PageTitle>Users</PageTitle>

<h1>User Data</h1>

@if (_loadingUsers)
{
    <h5>Loading users...</h5>
}
else
{
    <p style="color: red">@generateUsers.ErrorMsg</p>

    <div class="showSearchContainer">
        <button class="@(StyleSortButton("ShowAll"))" @onclick="HandleShowAll">Show All</button>
        <input placeholder="Search..." @oninput="HandleSearch" />
    </div>

    <br/>

    <CascadingValue Value="(SelectedSortOption, SearchInput)">
        <ul class="userDisplayContainer">
            <li class="sortContainer">
                <p class="@(StyleSortButton("Id")) special" @onclick='() => HandleSortBy("Id")' style="width:60px">Id</p>
                <p class="@(StyleSortButton("Name"))" @onclick='() => HandleSortBy("Name")'>Name</p>
                <p class="@(StyleSortButton("Email"))" @onclick='() => HandleSortBy("Email")' style="width:300px">E-mail</p>
                <p class="@(StyleSortButton("Street"))" @onclick='() => HandleSortBy("Street")'>Street</p>
                <p class="@(StyleSortButton("City"))" @onclick='() => HandleSortBy("City")'>City</p>
                <p class="@(StyleSortButton("ZipCode"))" @onclick='() => HandleSortBy("ZipCode")' style="width:150px">ZIP Code</p>
                <p class="@(StyleSortButton("CompanyName"))" @onclick='() => HandleSortBy("CompanyName")'>Co.Name</p>
                <p class="@(StyleSortButton("CompanyCatchphrase"))" @onclick='() => HandleSortBy("CompanyCatchphrase")' style="width:300px">Co.Catchphrase</p>
            </li>
            @foreach (var user in DisplayUsers())
            {
                <DisplayUser UserModel="user" />
            }
        </ul>
    </CascadingValue>
}

@code {
    private bool _loadingUsers = true;
    private bool _showAllUsers = false;
    private bool _sortAscending = true;
    private List<User> users = new();

    public string SelectedSortOption { get; set; } = "Name";
    public string SearchInput { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            users = await generateUsers.GetUsersAsync();            
            _loadingUsers = false;
            StateHasChanged();
        }
    }

    private void HandleShowAll()
    {
        _showAllUsers = !_showAllUsers;
    }

    private void HandleSortBy(string option)
    {
        if (SelectedSortOption == option)
        {
            _sortAscending = !_sortAscending;
        }
        else
        {
            SelectedSortOption = option;
            _sortAscending = true;
        }
    }

    private void HandleSearch(ChangeEventArgs e)
    {
        SearchInput = e.Value?.ToString() ?? string.Empty;
    }

    public List<User> DisplayUsers()
    {
        List<User> searchedUsers = SearchSortUsers.Search(users, SearchInput);
        List<User> sortedUsers = SearchSortUsers.Selection(searchedUsers, SelectedSortOption, _sortAscending, _showAllUsers);

        return sortedUsers;
    }

    private string StyleSortButton(string option)
    {
        if(option == "ShowAll")
        {
            return _showAllUsers ? "showAll" : "";
        }

        if (SelectedSortOption == option)
        {
            return _sortAscending ? "sortButtonAscending" : "sortButtonDescending";
        }

        return "";
    }
}
