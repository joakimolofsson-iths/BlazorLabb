@page "/users"
@rendermode InteractiveServer
@using BlazorLabb.Models

<PageTitle>Users</PageTitle>

<h3>Users</h3>

@if (_loadingUsers)
{
    <p>Loading users...</p>
}
else
{
    <p>@_errorMsg</p>

    <button @onclick="ShowAllUsers">@(!_showAll ? "Show All Users" : "Show First Five Users")</button>
    <button @onclick="SortById">@(!_sortById ? "Sort by ID / Ascending " : "Sort by ID / Descending")</button>
    <button @onclick="SortByName">@(!_sortByName ? "Sort by Name / Ascending" : "Sort by Name / Descending")</button>

    <input placeholder="Search" @oninput="HandleSearch"/>

    <br/>
    <br/>

    <ul>
        @foreach (var user in GetUsers())
        {
            <li>
                <p style="width: 50px">@user.Id</p>
                <p>@user.Name</p>
                <p style="width: 300px">@user.Email</p>
                <p>@user.Address.Street</p>
                <p>@user.Address.City</p>
                <p>@user.Address.ZipCode</p>
                <p>@user.Company.Name</p>
                <p style="width: 300px">@user.Company.Catchphrase</p>
            </li>
        }
    </ul>
}

@code {
    private bool _loadingUsers = true;
    private bool _showAll = false;
    private bool _sortById = false;
    private bool _sortByName = false;
    private string _lastButtonPressed;
    private List<User> _locallyGeneratedUsers = new List<User>();
    private List<User> _jsonGeneratedUsers = new List<User>();
    private List<User> _allGeneratedUsers = new List<User>();
    private string _errorMsg;
    private string _searchInput = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            _loadingUsers = false;
            await FetchJsonDataAsync();
            GenerateLocalUsers();
            CombineUsers();
            StateHasChanged();
        }
    }

    private async Task FetchJsonDataAsync()
    {
        using var httpClient = new HttpClient();

        try
        {
            var respone = await httpClient.GetStringAsync("https://jsonplaceholder.typicode.com/users");
            var users = JsonSerializer.Deserialize<List<User>>(respone, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true // Optional: ignore case when mapping properties
            });

            _jsonGeneratedUsers = users;
        }
        catch (HttpRequestException e)
        {
            _errorMsg = "Http Request Error...";
        }
        catch (Exception e)
        {
            _errorMsg = "Something went wrong...";
        }
    }

    //To-do: Skapa en separat class med alla metoder som har med skapande av users...
    private void GenerateLocalUsers()
    {
        string[] names = { "Emma Hayes", "Liam Carter", "Ava Brooks", "Noah Hughes", "Mia Bennett", "Ethan Price", "Sophia Rogers", "Oliver Reed", "Isabella Morgan", "Lucas Green" };
        string[] emails = { "bluefox87@mail.com", "sparklewave42@inbox.com", "sunnyclouds23@webmail.com", "silverstream55@netmail.com", "moonlitowl78@fastmail.com", "crimsonleaf91@mailbox.com", "goldenpetal34@postmail.com", "starfall16@freemail.com", "shimmeringsky45@quickmail.com", "wildriver82@openmail.com" };
        string[] streets = { "123 Maple St.", "456 Oak Ave.", "789 Pine Rd.", "101 Cedar Blvd.", "202 Birch Ln.", "303 Walnut St.", "404 Elm Dr.", "505 Chestnut Pl.", "606 Spruce Ct.", "707 Redwood Ter." };
        string[] cities = { "Springfield", "Rivertown", "Mapleton", "Brookside", "Lakeview", "Hillside", "Fairview", "Greendale", "Sunnydale", "Willowbrook" };
        string[] zipCodes = { "12345", "23456", "34567", "45678", "56789", "67890", "78901", "89012", "90123", "01234" };
        string[] companyNames = { "Greenfield Corp.", "Skyline Ventures", "Sunrise Innovations", "Peak Solutions", "Global Synergy", "BrightPath LLC", "NextGen Labs", "Blue Horizon Inc.", "Edge Dynamics", "VividTech" };
        string[] companyCatchphrases = { "Innovate Your Future", "Bringing Ideas to Life", "Where Vision Meets Reality", "Beyond the Horizon", "Empowering Possibilities", "Inspiring Growth", "Redefining Excellence", "The Future, Today", "Shaping Tomorrow", "Excellence Through Innovation" };

        var users = new List<User>();
        var random = new Random();
        int randomNumber = random.Next(0, 10);

        for (int i = 0; i < 10; i++)
        {

            users.Add(new User(i + 11, names[i], emails[i], streets[i], cities[i], zipCodes[i], companyNames[i], companyCatchphrases[i]));
        }

        _locallyGeneratedUsers = users;
    }

    private void CombineUsers()
    {
        _allGeneratedUsers.AddRange(_locallyGeneratedUsers);
        _allGeneratedUsers.AddRange(_jsonGeneratedUsers);
    }

    //To-do: Denna metod behövs förbättras, men den funkar...
    private List<User> GetUsers()
    {
        List<User> sortedUsers;
        int? showAllUser = _showAll ? null : 5;

        if(string.IsNullOrWhiteSpace(_searchInput))
        {
            sortedUsers = _allGeneratedUsers;
        }
        else
        {
            sortedUsers = _allGeneratedUsers.Where(search => search.Name.ToLower().StartsWith(_searchInput.ToLower()) ||
                 search.Email.ToLower().StartsWith(_searchInput.ToLower()) ||
                 search.Address.Street.ToLower().StartsWith(_searchInput.ToLower()) ||
                 search.Address.City.ToLower().StartsWith(_searchInput.ToLower()) ||
                 search.Address.ZipCode.ToLower().StartsWith(_searchInput.ToLower()) ||
                 search.Company.Name.ToLower().StartsWith(_searchInput.ToLower()) ||
                 search.Company.Catchphrase.ToLower().StartsWith(_searchInput.ToLower()))
                 .ToList();
        }

        //To-do: Jag tror att det kan vara snyggare med <option> ascending - descending här istället för knappar...
        if (_sortById && _lastButtonPressed == "sortById")
        {
            return sortedUsers.OrderBy(user => user.Id).Take(showAllUser ?? int.MaxValue).ToList();
        }
        else if (!_sortById && _lastButtonPressed == "sortById")
        {
            return sortedUsers.OrderByDescending(user => user.Id).Take(showAllUser ?? int.MaxValue).ToList();
        }
        else if (_sortByName && _lastButtonPressed == "sortByName")
        {
            return sortedUsers.OrderBy(user => user.Name).Take(showAllUser ?? int.MaxValue).ToList();
        }
        else if (!_sortByName && _lastButtonPressed == "sortByName")
        {
            return sortedUsers.OrderByDescending(user => user.Name).Take(showAllUser ?? int.MaxValue).ToList();
        }
        else
        {
            return sortedUsers.OrderBy(user => user.Name).Take(showAllUser ?? int.MaxValue).ToList();
        }
    }

    private void ShowAllUsers()
    {
        _showAll = !_showAll;
    }

    private void SortById()
    {
        _sortById = !_sortById;
        _lastButtonPressed = "sortById";
    }

    private void SortByName()
    {
        _sortByName = !_sortByName;
        _lastButtonPressed = "sortByName";
    }

    private void HandleSearch(ChangeEventArgs e)
    {
        _searchInput = e.Value?.ToString() ?? string.Empty;
    }
}