@page "/users"
@rendermode InteractiveServer
@using BlazorLabb.Models
@using BlazorLabb.Components.Pages.Components
@implements BlazorLabb.Interfaces.IUsers

<PageTitle>Users</PageTitle>

<h1>User Data</h1>

@if (_loadingUsers)
{
    <h5>Loading users...</h5>
}
else
{
    <p>@_errorMsg</p>

    <div class="sortSearchContainer">
        <button @onclick="HandleShowAll">Show All</button>
        <span>sort by:</span>
        <button @onclick='() => HandleSortBy("Id")'>Id</button>
        <button @onclick='() => HandleSortBy("Name")'>Name</button>
        <button @onclick='() => HandleSortBy("Email")'>E-Mail</button>
        <input placeholder="Search..." @oninput="HandleSearch" />
    </div>

    <br/>

    <ul class="userDisplayContainer">
        @foreach (var user in GetUsers())
        {
            <DisplayUser UserModel="user"/>
        }
    </ul>
}

@code {
    private Dictionary<string, bool> _sortByOptions = new()
    {
        { "Id", false },
        { "Name", false },
        { "Email", false }
    };
    private bool _loadingUsers = true;
    private bool _showAll = false;
    private bool _sortById = false;
    private bool _sortByName = false;
    private bool _sortByEmail = false;
    private string _lastButtonPressed;
    private List<User> _locallyGeneratedUsers = new List<User>();
    private List<User> _jsonGeneratedUsers = new List<User>();
    private List<User> _allGeneratedUsers = new List<User>();
    private string _errorMsg;
    private string _searchInput = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            _loadingUsers = false;
            await FetchJsonDataAsync();
            GenerateLocalUsers();
            CombineUsers();
            StateHasChanged();
        }
    }

    private async Task FetchJsonDataAsync()
    {
        using var httpClient = new HttpClient();

        try
        {
            var respone = await httpClient.GetStringAsync("https://jsonplaceholder.typicode.com/users");
            var users = JsonSerializer.Deserialize<List<User>>(respone, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            _jsonGeneratedUsers = users;
        }
        catch (HttpRequestException e)
        {
            _errorMsg = "Http Request Error...";
        }
        catch (Exception e)
        {
            _errorMsg = "Something went wrong...";
        }
    }

    private void GenerateLocalUsers()
    {
        string[] names = { "Emma Hayes", "Liam Carter", "Ava Brooks", "Noah Hughes", "Mia Bennett", "Ethan Price", "Sophia Rogers", "Oliver Reed", "Isabella Morgan", "Lucas Green" };
        string[] emails = { "bluefox87@mail.com", "sparklewave42@inbox.com", "sunnyclouds23@webmail.com", "silverstream55@netmail.com", "moonlitowl78@fastmail.com", "crimsonleaf91@mailbox.com", "goldenpetal34@postmail.com", "starfall16@freemail.com", "shimmeringsky45@quickmail.com", "wildriver82@openmail.com" };
        string[] streets = { "123 Maple St.", "456 Oak Ave.", "789 Pine Rd.", "101 Cedar Blvd.", "202 Birch Ln.", "303 Walnut St.", "404 Elm Dr.", "505 Chestnut Pl.", "606 Spruce Ct.", "707 Redwood Ter." };
        string[] cities = { "Springfield", "Rivertown", "Mapleton", "Brookside", "Lakeview", "Hillside", "Fairview", "Greendale", "Sunnydale", "Willowbrook" };
        string[] zipCodes = { "12345", "23456", "34567", "45678", "56789", "67890", "78901", "89012", "90123", "01234" };
        string[] companyNames = { "Greenfield Corp.", "Skyline Ventures", "Sunrise Innovations", "Peak Solutions", "Global Synergy", "BrightPath LLC", "NextGen Labs", "Blue Horizon Inc.", "Edge Dynamics", "VividTech" };
        string[] companyCatchphrases = { "Innovate Your Future", "Bringing Ideas to Life", "Where Vision Meets Reality", "Beyond the Horizon", "Empowering Possibilities", "Inspiring Growth", "Redefining Excellence", "The Future, Today", "Shaping Tomorrow", "Excellence Through Innovation" };

        var users = new List<User>();
        var random = new Random();
        int randomNumber = random.Next(0, 10);

        for (int i = 0; i < 10; i++)
        {

            users.Add(new User(i + 11, names[i], emails[i], streets[i], cities[i], zipCodes[i], companyNames[i], companyCatchphrases[i]));
        }

        _locallyGeneratedUsers = users;
    }

    private void CombineUsers()
    {
        _allGeneratedUsers.AddRange(_locallyGeneratedUsers);
        _allGeneratedUsers.AddRange(_jsonGeneratedUsers);
    }

    public List<User> GetUsers()
    {
        List<User> users;

        users = sortBySearch();
        users = sortBySelection(users);

        return users;
    }

    private List<User> sortBySearch()
    {
        List<User> users = new();

        if (string.IsNullOrWhiteSpace(_searchInput))
        {
            users = _allGeneratedUsers;
        }
        else
        {
            var _searchInputLower = _searchInput.ToLower();

            users = _allGeneratedUsers.Where(search => search.Id.ToString().StartsWith(_searchInputLower) ||
                search.Name.ToLower().StartsWith(_searchInputLower) ||
                search.Email.ToLower().StartsWith(_searchInputLower) ||
                search.Address.Street.ToLower().StartsWith(_searchInputLower) ||
                search.Address.City.ToLower().StartsWith(_searchInputLower) ||
                search.Address.ZipCode.ToLower().StartsWith(_searchInputLower) ||
                search.Company.Name.ToLower().StartsWith(_searchInputLower) ||
                search.Company.Catchphrase.ToLower().StartsWith(_searchInputLower))
                .ToList();
        }

        return users;
    }

    //Jag vill ha någon loop här... eller en generic method kanske... jag vill bara ha en orderBy och en orderByDesc, dessa ska ta input
    private List<User> sortBySelection(List<User> users)
    {
        int showLimitedUsers = 5;
        int? showAllUsers = _showAll ? null : showLimitedUsers;

        // Dictionary<string, Func<User, object>> fetchUserData = new()
        // {
        //     { "Id", user => user.Id}
        // };

        // if (_sortByOptions.ContainsKey(_lastButtonPressed) && _sortByOptions[_lastButtonPressed] == true)
        // {
        //     return users.OrderBy(user => typeof(User).GetProperty(_lastButtonPressed)).Take(showAllUsers ?? int.MaxValue).ToList();
        // }
        // else if (_sortByOptions.ContainsKey(_lastButtonPressed) && _sortByOptions[_lastButtonPressed] == false)
        // {
        //     return users.OrderByDescending(user => typeof(User).GetProperty(_lastButtonPressed)).Take(showAllUsers ?? int.MaxValue).ToList();
        // }

        // return users;

        // if (_sortById && _lastButtonPressed == "sortById")
        // {
        //     return users.OrderBy(user => user.Id).Take(showAllUsers ?? int.MaxValue).ToList();
        // }
        // else if (!_sortById && _lastButtonPressed == "sortById")
        // {
        //     return users.OrderByDescending(user => user.Id).Take(showAllUsers ?? int.MaxValue).ToList();
        // }
        // else if (_sortByName && _lastButtonPressed == "sortByName")
        // {
        //     return users.OrderBy(user => user.Name).Take(showAllUsers ?? int.MaxValue).ToList();
        // }
        // else if (!_sortByName && _lastButtonPressed == "sortByName")
        // {
        //     return users.OrderByDescending(user => user.Name).Take(showAllUsers ?? int.MaxValue).ToList();
        // }
        // else
        // {
        //     //default sortering av name efter "loading users..."
        //     return users.orderby(user => user.name).Take(showallusers ?? int.maxvalue).tolist();
        // }

        // switch (_lastButtonPressed)
        // {
        //     case "Id":
        //         // code block
        //         break;
        //     case "Name":
        //         // code block
        //         break;
        //     default:
        //         // code block
        //         break;
        // }
    }

    private void HandleShowAll()
    {
        _showAll = !_showAll;
    }

    private void HandleSortBy(string option)
    {
        if (_sortByOptions.ContainsKey(option))
        {
            _sortByOptions[option] = !_sortByOptions[option];
            _lastButtonPressed = option;
        }

        // if (_sortByOptions[option] == true)
        // {
        //     _errorMsg = _sortByOptions[option].ToString();
        // }
        
    }

    private void HandleSearch(ChangeEventArgs e)
    {
        _searchInput = e.Value?.ToString() ?? string.Empty;
    }

    // private void SortById()
    // {
    //     _sortById = !_sortById;
    //     _lastButtonPressed = "sortById";
    // }

    // private void SortByName()
    // {
    //     _sortByName = !_sortByName;
    //     _lastButtonPressed = "sortByName";
    // }

    // private void SortByEmail()
    // {
    //     _sortByName = !_sortByEmail;
    //     _lastButtonPressed = "sortByEmail";
    // }
}