@page "/users"
@rendermode InteractiveServer
@using BlazorLabb.Models
@using BlazorLabb.Components.Pages.Components
@using BlazorLabb.Services
@implements BlazorLabb.Interfaces.IUsers
@inject GenerateUsers generateUsers

<PageTitle>Users</PageTitle>

<h1>User Data</h1>

@if (_loadingUsers)
{
    <h5>Loading users...</h5>
}
else
{
    <p style="color: red">@generateUsers.ErrorMsg</p>

    <div class="sortSearchContainer">
        <button @onclick="HandleShowAll">Show All</button>

        <span>sort by:</span>
        <button @onclick='() => HandleSortBy("Id")'>Id</button>
        <button @onclick='() => HandleSortBy("Name")'>Name</button>
        <button @onclick='() => HandleSortBy("Email")'>E-Mail</button>

        <input placeholder="Search..." @oninput="HandleSearch" />
    </div>

    <br/>

    <ul class="userDisplayContainer">
        @foreach (var user in GetUsers())
        {
            <DisplayUser UserModel="user"/>
        }
    </ul>
}

@code {
    private bool _loadingUsers = true;
    private bool _showAllUsers = false;
    private string _selectedSortOption = "Name";
    private bool _sortAscending = true;
    private string _searchInput = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            _loadingUsers = false;
            StateHasChanged();
        }
    }

    public List<User> GetUsers()
    {
        List<User> generatedUsers = generateUsers.Users;

        List<User> searchedUsers = SearchSortUsers.Search(generatedUsers, _searchInput);
        List<User> sortedUsers = SearchSortUsers.Selection(searchedUsers, _selectedSortOption, _sortAscending, _showAllUsers);

        return sortedUsers;
    }

    private void HandleShowAll()
    {
        _showAllUsers = !_showAllUsers;
    }

    private void HandleSortBy(string option)
    {
        if (_selectedSortOption == option)
        {
            _sortAscending = !_sortAscending;
        }
        else
        {
            _selectedSortOption = option;
            _sortAscending = true;
        }        
    }

    private void HandleSearch(ChangeEventArgs e)
    {
        _searchInput = e.Value?.ToString() ?? string.Empty;
    }
}